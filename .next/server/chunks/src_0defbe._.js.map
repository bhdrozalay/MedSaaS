{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log: ['query'],\n  })\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma"],"names":[],"mappings":";;;;;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,uDAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 18, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/auth.ts"],"sourcesContent":["import bcrypt from 'bcryptjs'\nimport { prisma } from './prisma'\nimport { User, Tenant } from '@prisma/client'\n\nexport interface AuthUser {\n  id: string\n  name: string\n  email: string\n  tenantId: string\n  tenantName: string\n  departmentId: string | null\n  roleId: string | null\n  isActive: boolean\n}\n\nexport async function verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n  return bcrypt.compare(password, hashedPassword)\n}\n\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, 12)\n}\n\nexport async function authenticateUser(email: string, password: string): Promise<AuthUser | null> {\n  try {\n    const user = await prisma.user.findUnique({\n      where: { email },\n      include: {\n        tenant: true,\n        department: true,\n        role: true\n      }\n    })\n\n    if (!user || !user.isActive) {\n      return null\n    }\n\n    // Check if tenant is active\n    if (user.tenant.status === 'CANCELLED') {\n      throw new Error('Hesap iptal edilmiş')\n    }\n\n    const isPasswordValid = await verifyPassword(password, user.password)\n    if (!isPasswordValid) {\n      // Increment failed login attempts\n      await prisma.user.update({\n        where: { id: user.id },\n        data: {\n          failedLoginAttempts: user.failedLoginAttempts + 1,\n          accountLockedUntil: user.failedLoginAttempts >= 4 \n            ? new Date(Date.now() + 15 * 60 * 1000) // Lock for 15 minutes\n            : null\n        }\n      })\n      return null\n    }\n\n    // Check if account is locked\n    if (user.accountLockedUntil && user.accountLockedUntil > new Date()) {\n      throw new Error('Hesap geçici olarak kilitlendi')\n    }\n\n    // Reset failed attempts on successful login\n    await prisma.user.update({\n      where: { id: user.id },\n      data: {\n        failedLoginAttempts: 0,\n        accountLockedUntil: null,\n        lastLogin: new Date()\n      }\n    })\n\n    // Log audit entry\n    await prisma.auditLog.create({\n      data: {\n        tenantId: user.tenantId,\n        userId: user.id,\n        action: 'USER_LOGIN',\n        details: {\n          email: user.email,\n          timestamp: new Date().toISOString()\n        }\n      }\n    })\n\n    return {\n      id: user.id,\n      name: user.name,\n      email: user.email,\n      tenantId: user.tenantId,\n      tenantName: user.tenant.name,\n      departmentId: user.departmentId,\n      roleId: user.roleId,\n      isActive: user.isActive\n    }\n  } catch (error) {\n    console.error('Authentication error:', error)\n    throw error\n  }\n}\n\nexport async function createTenant(data: {\n  // Company info\n  companyName: string\n  companyType: string\n  taxNumber: string\n  taxOffice: string\n  \n  // Contact info\n  address: string\n  city: string\n  district: string\n  phone: string\n  website?: string\n  \n  // Business info\n  industryType: string\n  employeeCount: string\n  businessDescription?: string\n  \n  // Admin user\n  adminName: string\n  adminEmail: string\n  adminPhone?: string\n  password: string\n}) {\n  try {\n    // Check if tenant with same tax number exists\n    const existingTenant = await prisma.tenant.findUnique({\n      where: { taxNumber: data.taxNumber }\n    })\n    \n    if (existingTenant) {\n      throw new Error('Bu vergi numarası ile kayıtlı bir şirket bulunmaktadır')\n    }\n\n    // Check if admin email exists\n    const existingUser = await prisma.user.findUnique({\n      where: { email: data.adminEmail }\n    })\n    \n    if (existingUser) {\n      throw new Error('Bu e-posta adresi ile kayıtlı bir kullanıcı bulunmaktadır')\n    }\n\n    const hashedPassword = await hashPassword(data.password)\n\n    const result = await prisma.$transaction(async (tx) => {\n      // Create tenant\n      const tenant = await tx.tenant.create({\n        data: {\n          name: data.companyName,\n          type: data.companyType,\n          taxNumber: data.taxNumber,\n          taxOffice: data.taxOffice,\n          address: data.address,\n          city: data.city,\n          district: data.district,\n          phone: data.phone,\n          website: data.website,\n          industryType: data.industryType,\n          employeeCount: data.employeeCount,\n          businessDescription: data.businessDescription,\n          status: 'DEMO',\n          demoEndDate: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000) // 15 days\n        }\n      })\n\n      // Create default departments\n      const managementDept = await tx.department.create({\n        data: {\n          tenantId: tenant.id,\n          name: 'Yönetici',\n          description: 'Genel yönetim ve tüm modül erişimi',\n          isCustom: false\n        }\n      })\n\n      // Create admin role\n      const adminRole = await tx.role.create({\n        data: {\n          tenantId: tenant.id,\n          departmentId: managementDept.id,\n          name: 'Admin',\n          permissions: { modules: ['*'], actions: ['*'] },\n          isCustom: false\n        }\n      })\n\n      // Create admin user\n      const adminUser = await tx.user.create({\n        data: {\n          name: data.adminName,\n          email: data.adminEmail,\n          phone: data.adminPhone,\n          password: hashedPassword,\n          tenantId: tenant.id,\n          departmentId: managementDept.id,\n          roleId: adminRole.id,\n          isActive: true,\n          emailVerified: false\n        }\n      })\n\n      // Get professional plan\n      const proPlan = await tx.subscriptionPlan.findFirst({\n        where: { name: 'Profesyonel Plan' }\n      })\n\n      if (proPlan) {\n        // Create demo subscription\n        await tx.tenantSubscription.create({\n          data: {\n            tenantId: tenant.id,\n            planId: proPlan.id,\n            status: 'DEMO',\n            userCount: 1,\n            demoEndDate: tenant.demoEndDate!,\n            currentPeriodStart: new Date(),\n            currentPeriodEnd: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)\n          }\n        })\n      }\n\n      return { tenant, adminUser }\n    })\n\n    return result\n  } catch (error) {\n    console.error('Tenant creation error:', error)\n    throw error\n  }\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 233, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/app/api/auth/login/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { z } from 'zod'\nimport { authenticateUser } from '@/lib/auth'\n\nconst loginSchema = z.object({\n  email: z.string().email('Geçerli e-posta adresi giriniz'),\n  password: z.string().min(1, 'Şifre boş olamaz'),\n  rememberMe: z.boolean().optional()\n})\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    \n    // Validate request data\n    const validatedData = loginSchema.parse(body)\n    \n    // Authenticate user\n    const user = await authenticateUser(validatedData.email, validatedData.password)\n    \n    if (!user) {\n      return NextResponse.json({\n        success: false,\n        message: 'E-posta veya şifre hatalı'\n      }, { status: 401 })\n    }\n    \n    // TODO: Generate JWT token/session\n    // TODO: Set secure cookies\n    \n    return NextResponse.json({\n      success: true,\n      message: 'Giriş başarılı',\n      user: {\n        id: user.id,\n        name: user.name,\n        email: user.email,\n        tenantId: user.tenantId,\n        tenantName: user.tenantName,\n        role: 'admin' // TODO: Get from role data\n      },\n      redirectTo: '/dashboard'\n    }, { status: 200 })\n    \n  } catch (error) {\n    console.error('Login error:', error)\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json({\n        success: false,\n        message: 'Form verilerinde hata var',\n        errors: error.errors\n      }, { status: 400 })\n    }\n    \n    // Handle specific auth errors\n    if (error instanceof Error) {\n      return NextResponse.json({\n        success: false,\n        message: error.message\n      }, { status: 401 })\n    }\n    \n    return NextResponse.json({\n      success: false,\n      message: 'Giriş işlemi başarısız oldu'\n    }, { status: 500 })\n  }\n}"],"names":[],"mappings":";;;;;;;;;;AAIA,MAAM,cAAc,oKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3B,OAAO,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,UAAU,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,YAAY,oKAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ;AAClC;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,wBAAwB;QACxB,MAAM,gBAAgB,YAAY,KAAK,CAAC;QAExC,oBAAoB;QACpB,MAAM,OAAO,MAAM,CAAA,GAAA,oHAAA,CAAA,mBAAgB,AAAD,EAAE,cAAc,KAAK,EAAE,cAAc,QAAQ;QAE/E,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,SAAS;YACX,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,mCAAmC;QACnC,2BAA2B;QAE3B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT,MAAM;gBACJ,IAAI,KAAK,EAAE;gBACX,MAAM,KAAK,IAAI;gBACf,OAAO,KAAK,KAAK;gBACjB,UAAU,KAAK,QAAQ;gBACvB,YAAY,KAAK,UAAU;gBAC3B,MAAM,QAAQ,2BAA2B;YAC3C;YACA,YAAY;QACd,GAAG;YAAE,QAAQ;QAAI;IAEnB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gBAAgB;QAE9B,IAAI,iBAAiB,oKAAA,CAAA,IAAC,CAAC,QAAQ,EAAE;YAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,SAAS;gBACT,QAAQ,MAAM,MAAM;YACtB,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,8BAA8B;QAC9B,IAAI,iBAAiB,OAAO;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,SAAS,MAAM,OAAO;YACxB,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;QACX,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF"}},
    {"offset": {"line": 308, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}